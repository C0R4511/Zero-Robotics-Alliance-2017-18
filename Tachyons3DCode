//Begin page Counter
//finds position to block other dude
void findIntercept()
{
    float otherZR[12];
    api.getOtherZRState(otherZR);

    mathVecNormalize(otherZR, 3);
    multVec(otherZR, 0.08);
    targetPos[0]=otherZR[0];
    targetPos[1]=otherZR[1];
    targetPos[2]=otherZR[2];
}

// whether we should stop intercepting
bool discardIntercept() 
{
    float otherScore = game.getOtherScore();
    float myScore = game.getScore();
    
    // idk should i add this?
    if (myScore > otherScore && game.getFuelRemaining() < 0.20) return false;
    
    // if other ppl's score are very close to ours, and still plenty of time left
    return (myScore-otherScore <= 3.6 && 180-api.getTime() > 20);
}

// if the other people are heading towards base
bool headingBase() 
{
    float otherZR[12];
    api.getOtherZRState(otherZR);
    
    // if they're moving up lmao
    return (otherZR[5] <= -0.02);
}


//End page Counter
//Begin page Drill
float targetQuat[4];
float drillAttitude[3];
short sampCount;

// check whether drilling conditions are met 
bool ready() {
    if (fabs(myState[9]) >= 0.04 || fabs(myState[10]) >= 0.04) return false;
    if (fabs(myState[11]) >= 0.04 || fabs(myState[3]) >= 0.01||fabs(myState[4]) >= 0.01) return false;
    if (fabs(myState[5]) >= 0.01 || fabs(targetPos[0]-myState[0]) >= 0.02) return false;
    if (fabs(targetPos[1]-myState[1]) >= 0.02 || fabs(targetPos[2]-myState[2]) >= 0.02) return false;
    return true;
}

bool initDrill(float dest[3]) //get into position to start drilling
{
    float TMP[13];
    api.getMySphState(TMP);
    targetQuat[0]=TMP[6];
    targetQuat[1]=TMP[7];
    targetQuat[2]=0;
    targetQuat[3]=0;
    mathVecNormalize(targetQuat, 2);
    api.setQuatTarget(targetQuat);
    
    targetPos[0] = dest[0];
    targetPos[1] = dest[1];
    targetPos[2] = dest[2];
    moveFaster(targetPos);
    if(ready())
    {

        game.startDrill();
        api.setAttRateTarget(drillAttitude);
        return true;
    }
    return false;
}

bool drill() //actually set angle then move to angle
{
    if (game.getDrillError()) 
    {
       DEBUG(("ERROR"));
       game.stopDrill(); 
       return false;
    }
    api.setPositionTarget(targetPos);
    api.setAttRateTarget(drillAttitude);
        
    //if we have a sample
    if (game.checkSample()) {
        // if we have too many samples
        if (game.getNumSamplesHeld()==5)
            game.dropSample(4);
            
        game.pickupSample();
    }

    return true;
}
//End page Drill
//Begin page Movement
float getMag(float *vel){
    return sqrt(powf(vel[0],2)+powf(vel[1],2)+powf(vel[2],2));
}
void multVec(float *vec, float mult) {
    vec[0] *= mult;
    vec[1] *= mult;
    vec[2] *= mult;
}

// Fastest move function to get where you're going fast
void moveFaster(float *whereTo) {
    float v[3]; //float mult;
    mathVecSubtract(v, whereTo, myState, 3.0f);
    
    //mult = (1.0+1.0*(getMag(v)/0.6));
    multVec(v, 1.5);
    mathVecAdd(v, myState, v, 3);
    api.setPositionTarget(v);
}
//End page Movement
//Begin page main

float myState[12];      // holds our state variables

bool isBlue;            // whether we are fucking blue
bool farm;              // whether we are currently farming
int step;               // step in counter control structure

float targetPos[3];     // value for holding current pos. target

int destCnt;            // counter for myDest
float pos2D[2];         // 2D position for checking geysers and shit
float myDest[3][3];     // my drilling locations
float baseStation[2][3];// base station while normal or geyser

void init(){
    api.getMyZRState(myState);
    
    // drilling locations
    myDest[0][0] = 0.2, myDest[0][1] = 0.2, myDest[0][2] = 0.35;
    myDest[1][0] = -0.2, myDest[1][1] = 0.2, myDest[1][2] = 0.35;
    myDest[2][0] = 0.10, myDest[2][1] = 0.2, myDest[2][2] = 0.35;
    myDest[3][0] = -0.10, myDest[3][1] = 0.2, myDest[3][2] = 0.35;
    
	isBlue = (myState[0] > 0);
	for (int i = 0; i < 4 && !isBlue; i++)
	    myDest[i][0] *= -1, myDest[i][1] *= -1;
	
	// initializing other miscellaneous variables
	drillAttitude[2] = 1.0, drillAttitude[0] = drillAttitude[1] = 0;
	baseStation[0][0] = baseStation[0][1] = 0, baseStation[0][2] = 0;
	baseStation[1][0] = baseStation[1][1] = 0, baseStation[1][2] = 0.3;
	
	step = 1; destCnt = 0; farm = false;
}

void loop(){
    DEBUG(("%d", step));
	api.getMyZRState(myState);
	
	// 2D position for geysers and stuff
	pos2D[0] = myState[0];
	pos2D[1] = myState[1];
	
	// check conditions for driling
	if(step==1) {
	    if(initDrill(myDest[destCnt])) 
	        step = 2;
	}
	
	// begin drilling at position
	if(step==2)
	{
	    //if theres an error, start again
	    if(!drill()) step=1;
	    
	    // few conditions to check whether we stop drilling
	    // a) if the opponent is heading to the base to drop off samples
	    //    and their score is lower than ours; then we work to stop them
	    // b) if we drilled this place for 3 times or there is a geyser at
	    //    our current spot, we go back to base to drop off samples
	    
	    if((headingBase() && game.getOtherScore() < game.getScore()) ||
	        (game.getDrills(pos2D) == 3 || game.isGeyserHere(pos2D)))
	    {
	        game.stopDrill();
	        
	        
	        // determine next spot to drill
	        if (destCnt < 3 && !farm) destCnt += 1;
	        else if (isBlue) myDest[destCnt][1] += 0.08;
            else myDest[destCnt][1] -= 0.08;
	            
	        // if we are farming, continue drilling
	        // if we are not farming, go back to base
	        if (!farm) step = 3; 
	        else step = 1;
	    }
	}
	
	// get to base station
	if(step==3)
	{
	    // try to get back to base station
	    // to drop off samples and initiate
	    bool id = game.isGeyserHere(pos2D);
	    moveFaster(baseStation[id]);
	    
	    float attTarget[3];
        attTarget[0] = 0;
        attTarget[1] = 0;
        attTarget[2] = -1; 
        api.setAttitudeTarget(attTarget);
        
        if (game.atBaseStation()) 
        {
            for (int i = 0; i < 5; i++)
                game.dropSample(i);
            step = 4;
        } else if (api.getTime() < 60 && game.getFuelRemaining() < 0.6) {
            // if we did not get to the base station first and
            // we are instead getting intercepted, begin farming
            step = 1; farm = true; // once u farm, u no go backk
        }
	}
	
	// handle interception
	if(step==4)
	{
	    // if opponent ignores base station
	    if (discardIntercept()) step = 1;
	    else {
	        
	        // fuck em up
    	    findIntercept();
    	    moveFaster(targetPos);
    	    DEBUG(("%f, %f, %f", targetPos[0], targetPos[1], targetPos[2]));
	    }
	}
}

//End page main
